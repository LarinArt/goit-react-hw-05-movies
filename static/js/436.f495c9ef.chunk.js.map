{"version":3,"file":"static/js/436.f495c9ef.chunk.js","mappings":"iRAEaA,EAAUC,EAAAA,GAAAA,IAAH,gHAOPC,EAAOD,EAAAA,GAAAA,GAAH,+JASJE,EAAOF,EAAAA,GAAAA,GAAH,wbAoBJG,EAAMH,EAAAA,GAAAA,IAAH,+EAMHI,EAAOJ,EAAAA,GAAAA,EAAH,+DAIJK,EAASL,EAAAA,GAAAA,EAAH,2E,SC1CNM,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACE,+BACE,SAACR,EAAD,UACIQ,GAGF,SAACN,EAAD,UACGM,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,aAAtB,OACR,UAACT,EAAD,WACGS,GACD,SAACR,EAAD,CAAKS,KAAKC,EAAAA,EAAAA,GAAcF,GACtBG,IAAKJ,KACP,SAACP,EAAD,CAAKS,IAAKG,EACRD,IAAI,eAEN,SAACV,EAAD,UAAOM,MAPED,SAJf,SAACJ,EAAD,2B,mBCkBR,EAtBiB,WACf,IAAQW,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQP,GACLQ,MAAK,SAAAC,GAAO,OAAIN,EAAQM,MACxBC,OAAM,SAAAN,GAAK,OAAIC,EAASD,EAAMO,cAChC,CAACX,KAGF,iCACIT,IAAQ,SAACqB,EAAA,EAAD,IACTrB,IAAQ,SAACD,EAAD,CAAMC,KAAMA,IACpBa,IACC,SAAC,IAAD,wE,sGCrBKS,EAAS7B,EAAAA,GAAAA,OAAH,2XAoBNK,EAASL,EAAAA,GAAAA,EAAH,gG,iMClBb8B,EAAU,mCAEVC,E,MAAcC,GAAAA,OAAa,CAC/BC,QAJe,+BAKfC,OAAQ,CACNC,QAASL,KAIAM,EAAY,mCAAG,WAAMC,GAAN,uFACHN,EAAYO,IAAZ,gCACIR,EADJ,wCAC2CO,EAD3C,wBADG,cACpBE,EADoB,yBAInBA,EAASC,KAAKf,SAJK,2CAAH,sDAOZgB,EAAW,mCAAG,oGACFV,EAAYO,IAAZ,qCACSR,IAFP,cACnBS,EADmB,yBAIlBA,EAASC,KAAKf,SAJI,2CAAH,qDAOXiB,EAAU,mCAAG,WAAM1B,GAAN,uFACDe,EAAYO,IAAZ,iBACXtB,EADW,oBACQc,EADR,oBADC,cAClBS,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAOVjB,EAAO,mCAAG,WAAMP,GAAN,uFACEe,EAAYO,IAAZ,iBACXtB,EADW,4BACgBc,EADhB,oBADF,cACfS,EADe,yBAIdA,EAASC,KAAKjC,MAJA,2CAAH,sDAOPoC,EAAU,mCAAG,WAAM3B,GAAN,uFACDe,EAAYO,IAAZ,iBACXtB,EADW,4BACgBc,EADhB,2BADC,cAClBS,EADkB,yBAIjBA,EAASC,KAAKf,SAJG,2CAAH,uD,oDCzChB,IAAMZ,EAAgB,SAAC+B,GAAD,gDAA+CA,K","sources":["components/Cast/Cast.style.js","components/Cast/Cast.jsx","pages/MovieDetailsPage/CastPage.jsx","pages/MovieDetailsPage/MovieDetailsPage.style.js","services/movie-api.js","utils/getPosterLink.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -30px;\n  margin-left: -30px;\n  flex-wrap: wrap;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 4 - 30px);\n  margin-top: 30px;\n  margin-left: 30px;\n  border-radius: 5px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(255, 215, 0);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  transform: scale(1);\n  transition: all 250ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n    transition: all 250ms linear;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 450px;\n  overflow: hidden;\n`;\n\nexport const Name = styled.p`\n  padding: 10px;\n  font-weight: 700;\n`;\nexport const Notify = styled.p`\n  padding-left: 25px;\n  color: rgb(255, 215, 0);\n`;","import { getPosterLink } from 'utils/getPosterLink';\nimport PropTypes from 'prop-types';\nimport noPoster from 'images/noPoster.png';\n\nimport { Section, List, Item, Img, Name, Notify } from './Cast.style';\n\nexport const Cast = ({ cast }) => {\n  return (\n    <>\n      <Section>\n        {!cast ? \n        <Notify>No cast</Notify>\n        :\n        <List>\n          {cast.map(({ id, original_name, profile_path }) => (\n            <Item key={id}>\n              {profile_path ?\n              <Img src={getPosterLink(profile_path)}\n                alt={original_name}/> :\n              <Img src={noPoster}\n                alt='No Poster'/>\n              }\n              <Name>{original_name}</Name>\n            </Item>\n          ))}\n        </List>\n        }\n      </Section>\n    </>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/movie-api';\nimport { Cast } from 'components/Cast/Cast';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notify } from './MovieDetailsPage.style';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    getCast(movieId)\n      .then(results => setCast(results))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n\n  return (\n    <>\n      {!cast && <Loader />}\n      {cast && <Cast cast={cast} />}\n      {error && (\n        <Notify>404 Something went wrong, please try again later! :(</Notify>\n      )}\n    </>\n  );\n};\n\nexport default CastPage;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  width: 100px;\n  height: 30px;\n  margin-top: 20px;\n  margin-left: 60px;\n  color: black;\n  font-size: 18px;\n  font-weight: 700;\n  border: none;\n  border-radius: 5px;\n  background-color: rgb(255, 215, 0);\n  outline: none;\n  cursor: pointer;\n\n  &:hover {\n    color: rgb(0, 87, 183);\n    transition: all 250ms linear;\n  }\n`;\nexport const Notify = styled.p`\n  font-size: 20px;\n  padding-left: 25px;\n  color: rgb(255, 215, 0);\n`;\n","import axios from 'axios';\n\n// https://api.themoviedb.org/3/movie/550?api_key=c0a65f93ad9c41c31d77ca2daaf180b1\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c0a65f93ad9c41c31d77ca2daaf180b1';\n\nconst customAxios = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const searchMovies = async query => {\n  const response = await customAxios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async () => {\n  const response = await customAxios.get(\n    `/trending/all/week?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await customAxios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await customAxios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await customAxios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n","export const getPosterLink = (poster) => `https://image.tmdb.org/t/p/w300/${poster}`;"],"names":["Section","styled","List","Item","Img","Name","Notify","Cast","cast","map","id","original_name","profile_path","src","getPosterLink","alt","noPoster","movieId","useParams","useState","setCast","error","setError","useEffect","getCast","then","results","catch","message","Loader","Button","API_KEY","customAxios","axios","baseURL","params","api_key","searchMovies","query","get","response","data","getTrending","getDetails","getReviews","poster"],"sourceRoot":""}