{"version":3,"file":"static/js/715.1a19c1ed.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.style.js","components/MovieDetails/MovieDetails.jsx","components/Pages/MovieDetailsPage/MovieDetailsPage.style.js","components/Pages/MovieDetailsPage/MovieDetailsPage.jsx","services/movie-api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  width: 1400px;\n  margin: 0 auto;\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const Img = styled.img`\n  border-radius: 5px;\n  transform: scale(1);\n  transition: all 250ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.2);\n    transition: all 250ms linear;\n  }\n`;\n\nexport const Info = styled.div`\n  padding: 20px;\n  margin-left: 100px;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const InfoTitle = styled.h1`\n  margin-bottom: 10px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const ReleaseDate = styled.h2`\n  margin-bottom: 20px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const Score = styled.p`\n  margin-bottom: 30px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const Overview = styled.h2`\n  margin-bottom: 10px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const OverviewInfo = styled.p`\n  text-align: start;\n  margin-bottom: 30px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const Genres = styled.h2`\n  margin-bottom: 10px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const GenresInfo = styled.p`\n  color: rgb(255, 215, 0);\n`;\n\nexport const Information = styled.div`\n  background-color: rgb(255, 215, 0);\n  color: black;\n  padding: 25px;\n  color: rgb(255, 215, 0);\n`;\n\nexport const NavLinkStyle = styled(NavLink)`\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n  transition: all 250ms linear;\n\n  &:not(:last-child) {\n    margin-right: 25px;\n  }\n\n  &:hover,\n  &:focus {\n    color: rgb(0, 87, 183);\n    transition: all 250ms linear;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Wrapper,\n  Img,\n  Info,\n  InfoTitle,\n  ReleaseDate,\n  Score,\n  Overview,\n  OverviewInfo,\n  Genres,\n  GenresInfo,\n  Information,\n  NavLinkStyle,\n} from './MovieDetails.style';\n\nexport const MovieDetails = ({ movie }) => {\n  const {\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = movie;\n\n  const genresAll = genres.map(genre => genre.name).join(', ');\n  const location = useLocation();\n\n  return (\n    <>\n      <Wrapper>\n        <Img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n              : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n          }\n          alt={original_title}\n        />\n        <Info>\n          <InfoTitle>{original_title}</InfoTitle>\n          <ReleaseDate> ({release_date})</ReleaseDate>\n          <Score>User Score: {vote_average}</Score>\n          <Overview>Overview</Overview>\n          <OverviewInfo>{overview}</OverviewInfo>\n          <Genres>Genres</Genres>\n          <GenresInfo>{genresAll}</GenresInfo>\n        </Info>\n      </Wrapper>\n      <Information>\n        <NavLinkStyle to=\"cast\" state={location.state}>\n          Cast\n        </NavLinkStyle>\n        <NavLinkStyle to=\"reviews\" state={location.state}>\n          Reviews\n        </NavLinkStyle>\n      </Information>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.shape({\n    original_title: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    overview: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  width: 100px;\n  height: 30px;\n  margin-top: 20px;\n  margin-left: 60px;\n  color: black;\n  font-size: 18px;\n  font-weight: 700;\n  border: none;\n  border-radius: 5px;\n  background-color: rgb(255, 215, 0);\n  outline: none;\n  cursor: pointer;\n\n  &:hover {\n    color: rgb(0, 87, 183);\n    transition: all 250ms linear;\n  }\n`;\n","import { useState, useEffect, lazy } from 'react';\nimport {\n  useParams,\n  useNavigate,\n  useLocation,\n  Routes,\n  Route,\n} from 'react-router-dom';\nimport { getDetails } from 'services/movie-api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\n\nimport { Button } from './MovieDetailsPage.style';\n\nconst CastPage = lazy(() => import('../CastPage'));\nconst ReviewsPage = lazy(() => import('../ReviewsPage'));\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onGoBack = () => {\n    navigate(location?.state?.from ?? '/');\n  };\n\n  useEffect(() => {\n    getDetails(movieId)\n      .then(results => setMovie(results))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n\n  return (\n    <>\n      <Button type=\"button\" onClick={onGoBack}>\n        To Movies\n      </Button>\n      {!movie && <Loader />}\n      {movie && <MovieDetails movie={movie} />}\n      {error && <p>Something went wrong, please try again later!</p>}\n      <Routes>\n        <Route path=\"cast\" element={<CastPage />} />\n        <Route path=\"reviews\" element={<ReviewsPage />} />\n      </Routes>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\n// https://api.themoviedb.org/3/movie/550?api_key=c0a65f93ad9c41c31d77ca2daaf180b1\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c0a65f93ad9c41c31d77ca2daaf180b1';\n\nconst customAxios = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const searchMovies = async query => {\n  const response = await customAxios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async () => {\n  const response = await customAxios.get(\n    `/trending/all/week?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await customAxios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await customAxios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await customAxios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["Wrapper","styled","Img","Info","InfoTitle","ReleaseDate","Score","Overview","OverviewInfo","Genres","GenresInfo","Information","NavLinkStyle","NavLink","MovieDetails","movie","original_title","genres","overview","poster_path","release_date","vote_average","genresAll","map","genre","name","join","location","useLocation","src","alt","to","state","Button","CastPage","lazy","ReviewsPage","movieId","useParams","useState","setMovie","error","setError","navigate","useNavigate","useEffect","getDetails","then","results","catch","message","type","onClick","from","Loader","path","element","API_KEY","customAxios","axios","baseURL","params","api_key","searchMovies","query","get","response","data","getTrending","getCast","cast","getReviews"],"sourceRoot":""}